ssh-pageant is an SSH authentication agent for Cygwin that links OpenSSH to
PuTTY's Pageant.  It acts very much like ssh-agent, except it leaves the key
storage to Pageant.  You can use ssh-pageant to automate SSH connections from
the Cygwin shell, and I find this is most helpful for those services built on
top of SSH, like SFTP file transfers or pushing to secure git repositories.

Like ssh-agent, ssh-pageant starts by setting up the auth socket, and then it
prints the environment variables that will let openssh connections use that
socket.  The usual approach is to use your shell's "eval" command to load
those environment variables automatically.  By default, ssh-pageant outputs
sh-style commands, but the -c option will change that to csh-style commands.

For example, I just add the following lines to my bash configuration:

~/.bash_profile:
  if [ -z "$SSH_AUTH_SOCK" -a -x /usr/bin/ssh-pageant ]; then
    eval $(/usr/bin/ssh-pageant -q)
  fi
  trap logout HUP

~/.bash_logout:
  if [ -x /usr/bin/ssh-pageant -a ! -z "$SSH_PAGEANT_PID" ]; then
    eval $(/usr/bin/ssh-pageant -qk 2>/dev/null)
  fi

This will start a new ssh-pageant instance for each login shell.  That's not a
big deal since they all talk to the same Pageant instance, so you only have to
add your ssh keys once.  You could also rename ssh-pageant to ssh-agent and
then use something like keychain to manage a single instance, but I don't find
that necessary.


History: Once upon a time I privately developed a Cygwin terminal based on
PuTTY, which I wanted because I could use Cygwin-native ptys with PuTTY's
interface.  As part of that I also added an SSH_AUTH_SOCK shim which talked to
Pageant.  Then I discovered MinTTY, which does the terminal part much better.
The author wasn't interested in including the SSH_AUTH_SOCK functionality
though, so instead I split that out into this program, ssh-pageant, and I
finally published the code in April 2009.
